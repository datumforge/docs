{
  "openapi": "3.1.0",
  "info": {
    "title": "Datum OpenAPI 3.1.0 Specifications",
    "description": "Programmatic interfaces for interacting with Datum Services",
    "termsOfService": "https://datum.net/tos",
    "contact": {
      "name": "Datum Support",
      "url": "https://datum.net/support",
      "email": "support@datum.net"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "https://api.datum.net/v1",
      "description": "Datum Production API Endpoint"
    },
    {
      "url": "http://localhost:17608/v1",
      "description": "http localhost endpoint for testing purposes"
    }
  ],
  "paths": {
    "/entitlements": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "List Entitlements",
        "description": "List Entitlements.",
        "operationId": "listEntitlement",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entitlement list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Create a new Entitlement",
        "description": "Creates a new Entitlement and persists it to storage.",
        "operationId": "createEntitlement",
        "requestBody": {
          "description": "Entitlement to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "tier": {
                    "type": "string",
                    "enum": [
                      "FREE",
                      "PRO",
                      "ENTERPRISE"
                    ],
                    "default": "FREE"
                  },
                  "external_customer_id": {
                    "type": "string"
                  },
                  "external_subscription_id": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "boolean"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "cancelled": {
                    "type": "boolean"
                  },
                  "owner": {
                    "type": "string"
                  }
                },
                "required": [
                  "owner_id",
                  "tier",
                  "expires",
                  "cancelled",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entitlement created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Find a Entitlement by ID",
        "description": "Finds the Entitlement with the requested ID and returns it.",
        "operationId": "readEntitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entitlement with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Deletes a Entitlement by ID",
        "description": "Deletes the Entitlement with the requested ID.",
        "operationId": "deleteEntitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entitlement with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Updates a Entitlement",
        "description": "Updates a Entitlement and persists changes to storage.",
        "operationId": "updateEntitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Entitlement properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "tier": {
                    "type": "string",
                    "enum": [
                      "FREE",
                      "PRO",
                      "ENTERPRISE"
                    ],
                    "default": "FREE"
                  },
                  "external_customer_id": {
                    "type": "string"
                  },
                  "external_subscription_id": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "boolean"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "cancelled": {
                    "type": "boolean"
                  },
                  "owner": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entitlement updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/owner": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Entitlement with the given ID",
        "operationId": "readEntitlementOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Entitlement with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "List GroupMemberships",
        "description": "List GroupMemberships.",
        "operationId": "listGroupMembership",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result GroupMembership list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Create a new GroupMembership",
        "description": "Creates a new GroupMembership and persists it to storage.",
        "operationId": "createGroupMembership",
        "requestBody": {
          "description": "GroupMembership to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER"
                    ],
                    "default": "MEMBER"
                  },
                  "group_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "group": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  }
                },
                "required": [
                  "role",
                  "group_id",
                  "user_id",
                  "group",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupMembership created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships/{id}": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Find a GroupMembership by ID",
        "description": "Finds the GroupMembership with the requested ID and returns it.",
        "operationId": "readGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Deletes a GroupMembership by ID",
        "description": "Deletes the GroupMembership with the requested ID.",
        "operationId": "deleteGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "GroupMembership with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Updates a GroupMembership",
        "description": "Updates a GroupMembership and persists changes to storage.",
        "operationId": "updateGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "GroupMembership properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER"
                    ],
                    "default": "MEMBER"
                  },
                  "group": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupMembership updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships/{id}/group": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Find the attached Group",
        "description": "Find the attached Group of the GroupMembership with the given ID",
        "operationId": "readGroupMembershipGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group attached to GroupMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships/{id}/user": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the GroupMembership with the given ID",
        "operationId": "readGroupMembershipUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to GroupMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-settings": {
      "get": {
        "tags": [
          "GroupSetting"
        ],
        "summary": "List GroupSettings",
        "description": "List GroupSettings.",
        "operationId": "listGroupSetting",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result GroupSetting list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupSetting"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "GroupSetting"
        ],
        "summary": "Create a new GroupSetting",
        "description": "Creates a new GroupSetting and persists it to storage.",
        "operationId": "createGroupSetting",
        "requestBody": {
          "description": "GroupSetting to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "PUBLIC",
                      "PRIVATE"
                    ],
                    "default": "PUBLIC"
                  },
                  "join_policy": {
                    "type": "string",
                    "enum": [
                      "OPEN",
                      "INVITE_ONLY",
                      "APPLICATION_ONLY",
                      "INVITE_OR_APPLICATION"
                    ],
                    "default": "INVITE_OR_APPLICATION"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sync_to_slack": {
                    "type": "boolean"
                  },
                  "sync_to_github": {
                    "type": "boolean"
                  },
                  "group": {
                    "type": "string"
                  }
                },
                "required": [
                  "visibility",
                  "join_policy"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupSetting created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-settings/{id}": {
      "get": {
        "tags": [
          "GroupSetting"
        ],
        "summary": "Find a GroupSetting by ID",
        "description": "Finds the GroupSetting with the requested ID and returns it.",
        "operationId": "readGroupSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "GroupSetting"
        ],
        "summary": "Deletes a GroupSetting by ID",
        "description": "Deletes the GroupSetting with the requested ID.",
        "operationId": "deleteGroupSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "GroupSetting with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "GroupSetting"
        ],
        "summary": "Updates a GroupSetting",
        "description": "Updates a GroupSetting and persists changes to storage.",
        "operationId": "updateGroupSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "GroupSetting properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "PUBLIC",
                      "PRIVATE"
                    ],
                    "default": "PUBLIC"
                  },
                  "join_policy": {
                    "type": "string",
                    "enum": [
                      "OPEN",
                      "INVITE_ONLY",
                      "APPLICATION_ONLY",
                      "INVITE_OR_APPLICATION"
                    ],
                    "default": "INVITE_OR_APPLICATION"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sync_to_slack": {
                    "type": "boolean"
                  },
                  "sync_to_github": {
                    "type": "boolean"
                  },
                  "group": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupSetting updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-settings/{id}/group": {
      "get": {
        "tags": [
          "GroupSetting"
        ],
        "summary": "Find the attached Group",
        "description": "Find the attached Group of the GroupSetting with the given ID",
        "operationId": "readGroupSettingGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group attached to GroupSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List Groups",
        "description": "List Groups.",
        "operationId": "listGroup",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Group list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create a new Group",
        "description": "Creates a new Group and persists it to storage.",
        "operationId": "createGroup",
        "requestBody": {
          "description": "Group to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "gravatar_logo_url": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "setting": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "owner_id",
                  "name",
                  "display_name",
                  "owner",
                  "setting"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find a Group by ID",
        "description": "Finds the Group with the requested ID and returns it.",
        "operationId": "readGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Deletes a Group by ID",
        "description": "Deletes the Group with the requested ID.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "Updates a Group",
        "description": "Updates a Group and persists changes to storage.",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "gravatar_logo_url": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "setting": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/members": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Members",
        "description": "List attached Members.",
        "operationId": "listGroupMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/owner": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Group with the given ID",
        "operationId": "readGroupOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Group with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/setting": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find the attached GroupSetting",
        "description": "Find the attached GroupSetting of the Group with the given ID",
        "operationId": "readGroupSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupSetting attached to Group with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/users": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listGroupUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "List Integrations",
        "description": "List Integrations.",
        "operationId": "listIntegration",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Integration list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Integration"
        ],
        "summary": "Create a new Integration",
        "description": "Creates a new Integration and persists it to storage.",
        "operationId": "createIntegration",
        "requestBody": {
          "description": "Integration to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "secret_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Find a Integration by ID",
        "description": "Finds the Integration with the requested ID and returns it.",
        "operationId": "readIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Integration"
        ],
        "summary": "Deletes a Integration by ID",
        "description": "Deletes the Integration with the requested ID.",
        "operationId": "deleteIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Integration with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Integration"
        ],
        "summary": "Updates a Integration",
        "description": "Updates a Integration and persists changes to storage.",
        "operationId": "updateIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Integration properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}/owner": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Integration with the given ID",
        "operationId": "readIntegrationOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Integration with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/invites": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "List Invites",
        "description": "List Invites.",
        "operationId": "listInvite",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Invite list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Invite"
        ],
        "summary": "Create a new Invite",
        "description": "Creates a new Invite and persists it to storage.",
        "operationId": "createInvite",
        "requestBody": {
          "description": "Invite to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "recipient": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "OWNER"
                    ],
                    "default": "MEMBER"
                  },
                  "owner": {
                    "type": "string"
                  }
                },
                "required": [
                  "owner_id",
                  "recipient",
                  "role",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Invite created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/invites/{id}": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "Find a Invite by ID",
        "description": "Finds the Invite with the requested ID and returns it.",
        "operationId": "readInvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Invite"
        ],
        "summary": "Deletes a Invite by ID",
        "description": "Deletes the Invite with the requested ID.",
        "operationId": "deleteInvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invite with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Invite"
        ],
        "summary": "Updates a Invite",
        "description": "Updates a Invite and persists changes to storage.",
        "operationId": "updateInvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Invite properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "recipient": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "OWNER"
                    ],
                    "default": "MEMBER"
                  },
                  "owner": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Invite updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/invites/{id}/owner": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Invite with the given ID",
        "operationId": "readInviteOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Invite with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-providers": {
      "get": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "List OauthProviders",
        "description": "List OauthProviders.",
        "operationId": "listOauthProvider",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OauthProvider list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OauthProvider"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Create a new OauthProvider",
        "description": "Creates a new OauthProvider and persists it to storage.",
        "operationId": "createOauthProvider",
        "requestBody": {
          "description": "OauthProvider to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "redirect_url": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "string"
                  },
                  "auth_url": {
                    "type": "string"
                  },
                  "token_url": {
                    "type": "string"
                  },
                  "auth_style": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 255,
                    "minimum": 0
                  },
                  "info_url": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "client_id",
                  "client_secret",
                  "redirect_url",
                  "scopes",
                  "auth_url",
                  "token_url",
                  "auth_style",
                  "info_url"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OauthProvider created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-providers/{id}": {
      "get": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Find a OauthProvider by ID",
        "description": "Finds the OauthProvider with the requested ID and returns it.",
        "operationId": "readOauthProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthProvider with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Deletes a OauthProvider by ID",
        "description": "Deletes the OauthProvider with the requested ID.",
        "operationId": "deleteOauthProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OauthProvider with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Updates a OauthProvider",
        "description": "Updates a OauthProvider and persists changes to storage.",
        "operationId": "updateOauthProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OauthProvider properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "redirect_url": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "string"
                  },
                  "auth_url": {
                    "type": "string"
                  },
                  "token_url": {
                    "type": "string"
                  },
                  "auth_style": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 255,
                    "minimum": 0
                  },
                  "info_url": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OauthProvider updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-providers/{id}/owner": {
      "get": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the OauthProvider with the given ID",
        "operationId": "readOauthProviderOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to OauthProvider with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oh-auth-too-tokens": {
      "get": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "List OhAuthTooTokens",
        "description": "List OhAuthTooTokens.",
        "operationId": "listOhAuthTooToken",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OhAuthTooToken list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OhAuthTooToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "Create a new OhAuthTooToken",
        "description": "Creates a new OhAuthTooToken and persists it to storage.",
        "operationId": "createOhAuthTooToken",
        "requestBody": {
          "description": "OhAuthTooToken to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "claims_user_id": {
                    "type": "string"
                  },
                  "claims_username": {
                    "type": "string"
                  },
                  "claims_email": {
                    "type": "string"
                  },
                  "claims_email_verified": {
                    "type": "boolean"
                  },
                  "claims_groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "claims_preferred_username": {
                    "type": "string"
                  },
                  "connector_id": {
                    "type": "string"
                  },
                  "connector_data": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "required": [
                  "client_id",
                  "nonce",
                  "claims_user_id",
                  "claims_username",
                  "claims_email",
                  "claims_email_verified",
                  "claims_preferred_username",
                  "connector_id",
                  "last_used"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OhAuthTooToken created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OhAuthTooToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oh-auth-too-tokens/{id}": {
      "get": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "Find a OhAuthTooToken by ID",
        "description": "Finds the OhAuthTooToken with the requested ID and returns it.",
        "operationId": "readOhAuthTooToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OhAuthTooToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OhAuthTooToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OhAuthTooToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "Deletes a OhAuthTooToken by ID",
        "description": "Deletes the OhAuthTooToken with the requested ID.",
        "operationId": "deleteOhAuthTooToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OhAuthTooToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OhAuthTooToken with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "Updates a OhAuthTooToken",
        "description": "Updates a OhAuthTooToken and persists changes to storage.",
        "operationId": "updateOhAuthTooToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OhAuthTooToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OhAuthTooToken properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "claims_user_id": {
                    "type": "string"
                  },
                  "claims_username": {
                    "type": "string"
                  },
                  "claims_email": {
                    "type": "string"
                  },
                  "claims_email_verified": {
                    "type": "boolean"
                  },
                  "claims_groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "claims_preferred_username": {
                    "type": "string"
                  },
                  "connector_id": {
                    "type": "string"
                  },
                  "connector_data": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OhAuthTooToken updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OhAuthTooToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "List OrgMemberships",
        "description": "List OrgMemberships.",
        "operationId": "listOrgMembership",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OrgMembership list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Create a new OrgMembership",
        "description": "Creates a new OrgMembership and persists it to storage.",
        "operationId": "createOrgMembership",
        "requestBody": {
          "description": "OrgMembership to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "OWNER"
                    ],
                    "default": "MEMBER"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "organization": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  }
                },
                "required": [
                  "role",
                  "organization_id",
                  "user_id",
                  "organization",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrgMembership created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships/{id}": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Find a OrgMembership by ID",
        "description": "Finds the OrgMembership with the requested ID and returns it.",
        "operationId": "readOrgMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrgMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Deletes a OrgMembership by ID",
        "description": "Deletes the OrgMembership with the requested ID.",
        "operationId": "deleteOrgMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OrgMembership with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Updates a OrgMembership",
        "description": "Updates a OrgMembership and persists changes to storage.",
        "operationId": "updateOrgMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OrgMembership properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "OWNER"
                    ],
                    "default": "MEMBER"
                  },
                  "organization": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrgMembership updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships/{id}/organization": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the OrgMembership with the given ID",
        "operationId": "readOrgMembershipOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to OrgMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships/{id}/user": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the OrgMembership with the given ID",
        "operationId": "readOrgMembershipUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to OrgMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-settings": {
      "get": {
        "tags": [
          "OrganizationSetting"
        ],
        "summary": "List OrganizationSettings",
        "description": "List OrganizationSettings.",
        "operationId": "listOrganizationSetting",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OrganizationSetting list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationSetting"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationSetting"
        ],
        "summary": "Create a new OrganizationSetting",
        "description": "Creates a new OrganizationSetting and persists it to storage.",
        "operationId": "createOrganizationSetting",
        "requestBody": {
          "description": "OrganizationSetting to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domains": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sso_cert": {
                    "type": "string"
                  },
                  "sso_entrypoint": {
                    "type": "string"
                  },
                  "sso_issuer": {
                    "type": "string"
                  },
                  "billing_contact": {
                    "type": "string"
                  },
                  "billing_email": {
                    "type": "string"
                  },
                  "billing_phone": {
                    "type": "string"
                  },
                  "billing_address": {
                    "type": "string"
                  },
                  "tax_identifier": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organization": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrganizationSetting created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-settings/{id}": {
      "get": {
        "tags": [
          "OrganizationSetting"
        ],
        "summary": "Find a OrganizationSetting by ID",
        "description": "Finds the OrganizationSetting with the requested ID and returns it.",
        "operationId": "readOrganizationSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OrganizationSetting"
        ],
        "summary": "Deletes a OrganizationSetting by ID",
        "description": "Deletes the OrganizationSetting with the requested ID.",
        "operationId": "deleteOrganizationSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OrganizationSetting with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OrganizationSetting"
        ],
        "summary": "Updates a OrganizationSetting",
        "description": "Updates a OrganizationSetting and persists changes to storage.",
        "operationId": "updateOrganizationSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OrganizationSetting properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domains": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sso_cert": {
                    "type": "string"
                  },
                  "sso_entrypoint": {
                    "type": "string"
                  },
                  "sso_issuer": {
                    "type": "string"
                  },
                  "billing_contact": {
                    "type": "string"
                  },
                  "billing_email": {
                    "type": "string"
                  },
                  "billing_phone": {
                    "type": "string"
                  },
                  "billing_address": {
                    "type": "string"
                  },
                  "tax_identifier": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organization": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrganizationSetting updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-settings/{id}/organization": {
      "get": {
        "tags": [
          "OrganizationSetting"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the OrganizationSetting with the given ID",
        "operationId": "readOrganizationSettingOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to OrganizationSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List Organizations",
        "description": "List Organizations.",
        "operationId": "listOrganization",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organization list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create a new Organization",
        "description": "Creates a new Organization and persists it to storage.",
        "operationId": "createOrganization",
        "requestBody": {
          "description": "Organization to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "parent_organization_id": {
                    "type": "string"
                  },
                  "personal_org": {
                    "type": "boolean"
                  },
                  "parent": {
                    "type": "string"
                  },
                  "children": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "setting": {
                    "type": "string"
                  },
                  "entitlements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "personal_access_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauthprovider": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "invites": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "display_name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find a Organization by ID",
        "description": "Finds the Organization with the requested ID and returns it.",
        "operationId": "readOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Deletes a Organization by ID",
        "description": "Deletes the Organization with the requested ID.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Updates a Organization",
        "description": "Updates a Organization and persists changes to storage.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Organization properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "parent": {
                    "type": "string"
                  },
                  "children": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "setting": {
                    "type": "string"
                  },
                  "entitlements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "personal_access_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauthprovider": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "invites": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/children": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Childrens",
        "description": "List attached Childrens.",
        "operationId": "listOrganizationChildren",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/entitlements": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Entitlements",
        "description": "List attached Entitlements.",
        "operationId": "listOrganizationEntitlements",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/groups": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Groups",
        "description": "List attached Groups.",
        "operationId": "listOrganizationGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/integrations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Integrations",
        "description": "List attached Integrations.",
        "operationId": "listOrganizationIntegrations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/invites": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Invites",
        "description": "List attached Invites.",
        "operationId": "listOrganizationInvites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/members": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Members",
        "description": "List attached Members.",
        "operationId": "listOrganizationMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/oauthprovider": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Oauthproviders",
        "description": "List attached Oauthproviders.",
        "operationId": "listOrganizationOauthprovider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OauthProvider"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/parent": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Organization with the given ID",
        "operationId": "readOrganizationParent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Organization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/personal-access-tokens": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached PersonalAccessTokens",
        "description": "List attached PersonalAccessTokens.",
        "operationId": "listOrganizationPersonalAccessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalAccessToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/setting": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find the attached OrganizationSetting",
        "description": "Find the attached OrganizationSetting of the Organization with the given ID",
        "operationId": "readOrganizationSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationSetting attached to Organization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/users": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listOrganizationUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "List PersonalAccessTokens",
        "description": "List PersonalAccessTokens.",
        "operationId": "listPersonalAccessToken",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result PersonalAccessToken list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalAccessToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Create a new PersonalAccessToken",
        "description": "Creates a new PersonalAccessToken and persists it to storage.",
        "operationId": "createPersonalAccessToken",
        "requestBody": {
          "description": "PersonalAccessToken to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "owner_id",
                  "name",
                  "token",
                  "expires_at",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PersonalAccessToken created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Find a PersonalAccessToken by ID",
        "description": "Finds the PersonalAccessToken with the requested ID and returns it.",
        "operationId": "readPersonalAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PersonalAccessToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Deletes a PersonalAccessToken by ID",
        "description": "Deletes the PersonalAccessToken with the requested ID.",
        "operationId": "deletePersonalAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "PersonalAccessToken with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Updates a PersonalAccessToken",
        "description": "Updates a PersonalAccessToken and persists changes to storage.",
        "operationId": "updatePersonalAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "PersonalAccessToken properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PersonalAccessToken updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}/organizations": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listPersonalAccessTokenOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result PersonalAccessTokens list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}/owner": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the PersonalAccessToken with the given ID",
        "operationId": "readPersonalAccessTokenOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to PersonalAccessToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-settings": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "List UserSettings",
        "description": "List UserSettings.",
        "operationId": "listUserSetting",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result UserSetting list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSetting"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Create a new UserSetting",
        "description": "Creates a new UserSetting and persists it to storage.",
        "operationId": "createUserSetting",
        "requestBody": {
          "description": "UserSetting to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string"
                  },
                  "locked": {
                    "type": "boolean"
                  },
                  "silenced_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "DEACTIVATED",
                      "SUSPENDED"
                    ],
                    "default": "ACTIVE"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "is_phone_otp_allowed": {
                    "type": "boolean"
                  },
                  "is_email_otp_allowed": {
                    "type": "boolean"
                  },
                  "is_totp_allowed": {
                    "type": "boolean"
                  },
                  "is_webauthn_allowed": {
                    "type": "boolean"
                  },
                  "is_tfa_enabled": {
                    "type": "boolean"
                  },
                  "user": {
                    "type": "string"
                  },
                  "default_org": {
                    "type": "string"
                  }
                },
                "required": [
                  "locked",
                  "status",
                  "tags"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "UserSetting created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-settings/{id}": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Find a UserSetting by ID",
        "description": "Finds the UserSetting with the requested ID and returns it.",
        "operationId": "readUserSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Deletes a UserSetting by ID",
        "description": "Deletes the UserSetting with the requested ID.",
        "operationId": "deleteUserSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "UserSetting with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Updates a UserSetting",
        "description": "Updates a UserSetting and persists changes to storage.",
        "operationId": "updateUserSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "UserSetting properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string"
                  },
                  "locked": {
                    "type": "boolean"
                  },
                  "silenced_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "DEACTIVATED",
                      "SUSPENDED"
                    ],
                    "default": "ACTIVE"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "is_phone_otp_allowed": {
                    "type": "boolean"
                  },
                  "is_email_otp_allowed": {
                    "type": "boolean"
                  },
                  "is_totp_allowed": {
                    "type": "boolean"
                  },
                  "is_webauthn_allowed": {
                    "type": "boolean"
                  },
                  "is_tfa_enabled": {
                    "type": "boolean"
                  },
                  "user": {
                    "type": "string"
                  },
                  "default_org": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "UserSetting updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-settings/{id}/default-org": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the UserSetting with the given ID",
        "operationId": "readUserSettingDefaultOrg",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to UserSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-settings/{id}/user": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the UserSetting with the given ID",
        "operationId": "readUserSettingUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to UserSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "avatar_local_file": {
                    "type": "string"
                  },
                  "avatar_updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "oauth": {
                    "type": "boolean"
                  },
                  "auth_provider": {
                    "type": "string",
                    "enum": [
                      "CREDENTIALS",
                      "GOOGLE",
                      "GITHUB"
                    ],
                    "default": "CREDENTIALS"
                  },
                  "personal_access_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "setting": {
                    "type": "string"
                  },
                  "email_verification_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password_reset_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webauthn": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_memberships": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "org_memberships": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "email",
                  "first_name",
                  "last_name",
                  "display_name",
                  "auth_provider",
                  "setting"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "avatar_local_file": {
                    "type": "string"
                  },
                  "avatar_updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "oauth": {
                    "type": "boolean"
                  },
                  "auth_provider": {
                    "type": "string",
                    "enum": [
                      "CREDENTIALS",
                      "GOOGLE",
                      "GITHUB"
                    ],
                    "default": "CREDENTIALS"
                  },
                  "personal_access_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "setting": {
                    "type": "string"
                  },
                  "email_verification_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password_reset_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webauthn": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_memberships": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "org_memberships": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/email-verification-tokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached EmailVerificationTokens",
        "description": "List attached EmailVerificationTokens.",
        "operationId": "listUserEmailVerificationTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailVerificationToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/group-memberships": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached GroupMemberships",
        "description": "List attached GroupMemberships.",
        "operationId": "listUserGroupMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/groups": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Groups",
        "description": "List attached Groups.",
        "operationId": "listUserGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/org-memberships": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached OrgMemberships",
        "description": "List attached OrgMemberships.",
        "operationId": "listUserOrgMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/organizations": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listUserOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/password-reset-tokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached PasswordResetTokens",
        "description": "List attached PasswordResetTokens.",
        "operationId": "listUserPasswordResetTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PasswordResetToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/personal-access-tokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached PersonalAccessTokens",
        "description": "List attached PersonalAccessTokens.",
        "operationId": "listUserPersonalAccessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalAccessToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/setting": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find the attached UserSetting",
        "description": "Find the attached UserSetting of the User with the given ID",
        "operationId": "readUserSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserSetting attached to User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/webauthn": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Webauthns",
        "description": "List attached Webauthns.",
        "operationId": "listUserWebauthn",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webauthn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webauthns": {
      "get": {
        "tags": [
          "Webauthn"
        ],
        "summary": "List Webauthns",
        "description": "List Webauthns.",
        "operationId": "listWebauthn",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Webauthn list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webauthn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Webauthn"
        ],
        "summary": "Create a new Webauthn",
        "description": "Creates a new Webauthn and persists it to storage.",
        "operationId": "createWebauthn",
        "requestBody": {
          "description": "Webauthn to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "credential_id": {
                    "type": "string"
                  },
                  "public_key": {
                    "type": "string",
                    "format": "byte"
                  },
                  "attestation_type": {
                    "type": "string"
                  },
                  "aaguid": {
                    "type": "string"
                  },
                  "sign_count": {
                    "type": "integer"
                  },
                  "transports": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "flags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "authenticator": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "backup_eligible": {
                    "type": "boolean"
                  },
                  "backup_state": {
                    "type": "boolean"
                  },
                  "owner": {
                    "type": "string"
                  }
                },
                "required": [
                  "owner_id",
                  "name",
                  "user_id",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webauthn created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webauthn"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webauthns/{id}": {
      "get": {
        "tags": [
          "Webauthn"
        ],
        "summary": "Find a Webauthn by ID",
        "description": "Finds the Webauthn with the requested ID and returns it.",
        "operationId": "readWebauthn",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webauthn",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webauthn with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webauthn"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Webauthn"
        ],
        "summary": "Deletes a Webauthn by ID",
        "description": "Deletes the Webauthn with the requested ID.",
        "operationId": "deleteWebauthn",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webauthn",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webauthn with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Webauthn"
        ],
        "summary": "Updates a Webauthn",
        "description": "Updates a Webauthn and persists changes to storage.",
        "operationId": "updateWebauthn",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webauthn",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Webauthn properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "credential_id": {
                    "type": "string"
                  },
                  "public_key": {
                    "type": "string",
                    "format": "byte"
                  },
                  "attestation_type": {
                    "type": "string"
                  },
                  "aaguid": {
                    "type": "string"
                  },
                  "sign_count": {
                    "type": "integer"
                  },
                  "transports": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "flags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "authenticator": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "backup_eligible": {
                    "type": "boolean"
                  },
                  "backup_state": {
                    "type": "boolean"
                  },
                  "owner": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webauthn updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webauthn"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webauthns/{id}/owner": {
      "get": {
        "tags": [
          "Webauthn"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Webauthn with the given ID",
        "operationId": "readWebauthnOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webauthn",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Webauthn with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EmailVerificationToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "ttl": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "secret": {
            "type": "string",
            "format": "byte"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "owner_id",
          "token",
          "email",
          "owner"
        ]
      },
      "Entitlement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "tier": {
            "type": "string",
            "enum": [
              "FREE",
              "PRO",
              "ENTERPRISE"
            ],
            "default": "FREE"
          },
          "external_customer_id": {
            "type": "string"
          },
          "external_subscription_id": {
            "type": "string"
          },
          "expires": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "cancelled": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "owner_id",
          "tier",
          "expires",
          "cancelled",
          "owner"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "gravatar_logo_url": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          },
          "setting": {
            "$ref": "#/components/schemas/GroupSetting"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembership"
            }
          }
        },
        "required": [
          "id",
          "owner_id",
          "name",
          "display_name",
          "owner",
          "setting"
        ]
      },
      "GroupMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER"
            ],
            "default": "MEMBER"
          },
          "group_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "role",
          "group_id",
          "user_id",
          "group",
          "user"
        ]
      },
      "GroupSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ],
            "default": "PUBLIC"
          },
          "join_policy": {
            "type": "string",
            "enum": [
              "OPEN",
              "INVITE_ONLY",
              "APPLICATION_ONLY",
              "INVITE_OR_APPLICATION"
            ],
            "default": "INVITE_OR_APPLICATION"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sync_to_slack": {
            "type": "boolean"
          },
          "sync_to_github": {
            "type": "boolean"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          }
        },
        "required": [
          "id",
          "visibility",
          "join_policy"
        ]
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Invite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "recipient": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "INVITATION_SENT",
              "APPROVAL_REQUIRED",
              "INVITATION_ACCEPTED",
              "INVITATION_EXPIRED"
            ],
            "default": "INVITATION_SENT"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ],
            "default": "MEMBER"
          },
          "send_attempts": {
            "type": "integer"
          },
          "requestor_id": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "owner_id",
          "recipient",
          "status",
          "role",
          "send_attempts",
          "requestor_id",
          "owner"
        ]
      },
      "OauthProvider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "scopes": {
            "type": "string"
          },
          "auth_url": {
            "type": "string"
          },
          "token_url": {
            "type": "string"
          },
          "auth_style": {
            "type": "integer",
            "format": "int32",
            "maximum": 255,
            "minimum": 0
          },
          "info_url": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "name",
          "client_id",
          "client_secret",
          "redirect_url",
          "scopes",
          "auth_url",
          "token_url",
          "auth_style",
          "info_url"
        ]
      },
      "OhAuthTooToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nonce": {
            "type": "string"
          },
          "claims_user_id": {
            "type": "string"
          },
          "claims_username": {
            "type": "string"
          },
          "claims_email": {
            "type": "string"
          },
          "claims_email_verified": {
            "type": "boolean"
          },
          "claims_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "claims_preferred_username": {
            "type": "string"
          },
          "connector_id": {
            "type": "string"
          },
          "connector_data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "client_id",
          "nonce",
          "claims_user_id",
          "claims_username",
          "claims_email",
          "claims_email_verified",
          "claims_preferred_username",
          "connector_id",
          "last_used"
        ]
      },
      "OrgMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "OWNER"
            ],
            "default": "MEMBER"
          },
          "organization_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "role",
          "organization_id",
          "user_id",
          "organization",
          "user"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parent_organization_id": {
            "type": "string"
          },
          "personal_org": {
            "type": "boolean"
          },
          "parent": {
            "$ref": "#/components/schemas/Organization"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          },
          "setting": {
            "$ref": "#/components/schemas/OrganizationSetting"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entitlement"
            }
          },
          "personal_access_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalAccessToken"
            }
          },
          "oauthprovider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthProvider"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "invites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invite"
            }
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgMembership"
            }
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "OrganizationSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sso_cert": {
            "type": "string"
          },
          "sso_entrypoint": {
            "type": "string"
          },
          "sso_issuer": {
            "type": "string"
          },
          "billing_contact": {
            "type": "string"
          },
          "billing_email": {
            "type": "string"
          },
          "billing_phone": {
            "type": "string"
          },
          "billing_address": {
            "type": "string"
          },
          "tax_identifier": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id"
        ]
      },
      "PasswordResetToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "ttl": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "secret": {
            "type": "string",
            "format": "byte"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "owner_id",
          "token",
          "email",
          "owner"
        ]
      },
      "PersonalAccessToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        },
        "required": [
          "id",
          "owner_id",
          "name",
          "token",
          "owner"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          },
          "oauth": {
            "type": "boolean"
          },
          "auth_provider": {
            "type": "string",
            "enum": [
              "CREDENTIALS",
              "GOOGLE",
              "GITHUB"
            ],
            "default": "CREDENTIALS"
          },
          "personal_access_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalAccessToken"
            }
          },
          "setting": {
            "$ref": "#/components/schemas/UserSetting"
          },
          "email_verification_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailVerificationToken"
            }
          },
          "password_reset_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordResetToken"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "webauthn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webauthn"
            }
          },
          "group_memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembership"
            }
          },
          "org_memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgMembership"
            }
          }
        },
        "required": [
          "id",
          "email",
          "first_name",
          "last_name",
          "display_name",
          "auth_provider",
          "setting"
        ]
      },
      "UserSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DEACTIVATED",
              "SUSPENDED"
            ],
            "default": "ACTIVE"
          },
          "email_confirmed": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_phone_otp_allowed": {
            "type": "boolean"
          },
          "is_email_otp_allowed": {
            "type": "boolean"
          },
          "is_totp_allowed": {
            "type": "boolean"
          },
          "is_webauthn_allowed": {
            "type": "boolean"
          },
          "is_tfa_enabled": {
            "type": "boolean"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "default_org": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "locked",
          "status",
          "email_confirmed",
          "tags"
        ]
      },
      "Webauthn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "credential_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string",
            "format": "byte"
          },
          "attestation_type": {
            "type": "string"
          },
          "aaguid": {
            "type": "string"
          },
          "sign_count": {
            "type": "integer"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "flags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "authenticator": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "backup_eligible": {
            "type": "boolean"
          },
          "backup_state": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "owner_id",
          "name",
          "user_id",
          "owner"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}